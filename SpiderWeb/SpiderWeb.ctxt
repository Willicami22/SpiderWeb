#BlueJ class context
comment0.target=SpiderWeb
comment0.text=\r\n\ The\ SpiderWeb\ class\ models\ a\ spider\ web\ which\ includes\ strands,\ spots,\ bridges,\ and\ a\ spider.\r\n\ The\ web\ can\ be\ visualized\ and\ manipulated\ through\ various\ methods\ provided.\r\n\ This\ class\ is\ a\ part\ of\ a\ larger\ simulation\ that\ may\ involve\ graphical\ interaction\ with\ a\ user.\r\n\r\n\ Authors\:\ William\ Hernandez\ y\ Nicolas\ Toro\r\n\ Version\:\ 1.0\r\n
comment1.params=diameter\ numStrands
comment1.target=SpiderWeb(int,\ int)
comment1.text=\r\n\ Constructor\ for\ creating\ a\ SpiderWeb\ with\ specified\ diameter\ and\ number\ of\ strands.\r\n
comment10.params=percentage
comment10.target=void\ enlarge(double)
comment10.text=\r\n\ Enlarges\ the\ spider\ web\ by\ a\ specified\ percentage.\r\n\r\n\ This\ method\ increases\ the\ diameter\ of\ the\ web\ according\ to\ the\ provided\ percentage.\r\n\ As\ a\ result,\ the\ radius\ of\ each\ strand\ and\ the\ positions\ of\ all\ spots\ are\ recalculated\r\n\ to\ fit\ the\ new\ size.\ If\ the\ web\ is\ visible\ when\ this\ method\ is\ invoked,\ it\ will\ temporarily\r\n\ be\ made\ invisible\ during\ the\ update\ process\ and\ then\ made\ visible\ again\ once\ adjustments\r\n\ are\ complete.\ This\ ensures\ that\ the\ changes\ are\ properly\ applied\ and\ visible\ to\ the\ user.\r\n\r\n\ @param\ percentage\ The\ percentage\ by\ which\ to\ increase\ the\ web's\ diameter.\ The\ value\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ should\ represent\ a\ positive\ percentage\ (e.g.,\ 10\ for\ 10%\ increase).\r\n
comment11.params=color\ distance
comment11.target=void\ relocateBridge(java.lang.String,\ double)
comment11.text=\r\n\ Relocates\ a\ bridge\ on\ the\ spider\ web\ to\ a\ new\ distance\ from\ the\ center.\r\n\r\n\ This\ method\ updates\ the\ position\ of\ a\ specified\ bridge\ identified\ by\ its\ color.\r\n\ The\ new\ position\ is\ determined\ by\ a\ new\ distance\ from\ the\ web's\ center,\ provided\r\n\ the\ distance\ is\ less\ than\ half\ the\ diameter\ of\ the\ web\ and\ the\ bridge\ exists.\r\n\ If\ the\ bridge\ is\ currently\ visible,\ it\ will\ be\ briefly\ made\ invisible\ and\ then\r\n\ visible\ again\ to\ reflect\ the\ change\ visually.\r\n\r\n\ @param\ color\ \ \ \ The\ color\ identifier\ of\ the\ bridge\ to\ be\ relocated.\r\n\ @param\ distance\ The\ new\ distance\ from\ the\ center\ to\ which\ the\ bridge\ will\ be\ moved.\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ This\ distance\ must\ be\ less\ than\ half\ the\ diameter\ of\ the\ web.\r\n
comment12.params=color
comment12.target=void\ delBridge(java.lang.String)
comment12.text=\r\n\ Deletes\ a\ bridge\ from\ the\ spider\ web\ based\ on\ its\ color\ identifier.\r\n\r\n\ This\ method\ removes\ the\ bridge\ with\ the\ specified\ color\ from\ the\ spider\ web.\r\n\ If\ the\ bridge\ is\ currently\ visible,\ it\ will\ be\ made\ invisible\ upon\ deletion.\r\n\r\n\ @param\ color\ The\ color\ identifier\ of\ the\ bridge\ to\ be\ deleted.\r\n
comment13.params=color
comment13.target=void\ delSpot(java.lang.String)
comment13.text=\r\n\ Deletes\ a\ spot\ from\ the\ spider\ web\ based\ on\ its\ color\ identifier.\r\n\r\n\ This\ method\ removes\ the\ spot\ with\ the\ specified\ color\ from\ the\ spider\ web.\r\n\ If\ the\ spot\ is\ currently\ visible,\ it\ will\ be\ made\ invisible\ upon\ deletion.\r\n\r\n\ @param\ color\ The\ color\ identifier\ of\ the\ spot\ to\ be\ deleted.\r\n
comment14.params=strand
comment14.target=void\ spiderSit(int)
comment14.text=\r\n\ Moves\ the\ spider\ to\ sit\ on\ a\ specific\ strand\ of\ the\ spider\ web.\r\n\r\n\ This\ method\ relocates\ the\ spider\ to\ sit\ on\ the\ specified\ strand\ of\ the\ spider\ web.\r\n\ If\ the\ provided\ strand\ index\ is\ valid\ within\ the\ current\ number\ of\ strands,\ the\ spider\r\n\ will\ erase\ its\ last\ path,\ become\ invisible,\ return\ to\ the\ center\ of\ the\ web,\ and\ then\r\n\ move\ to\ sit\ on\ the\ specified\ strand.\ The\ spider's\ current\ strand\ attribute\ is\ updated\r\n\ accordingly.\ If\ the\ spider\ web\ is\ visible,\ the\ spider\ will\ become\ visible\ after\ the\ move.\r\n\r\n\ @param\ strand\ The\ index\ of\ the\ strand\ where\ the\ spider\ will\ sit.\r\n
comment15.params=advance
comment15.target=void\ spiderWalk(boolean)
comment15.text=\r\n\ Initiates\ the\ spider's\ movement\ on\ the\ spider\ web,\ either\ advancing\ or\ retracting.\r\n\r\n\ This\ method\ controls\ the\ spider's\ movement\ on\ the\ spider\ web,\ allowing\ it\ to\ either\r\n\ advance\ towards\ the\ outer\ edge\ of\ the\ web\ or\ retract\ towards\ the\ center.\ The\ spider\r\n\ will\ erase\ its\ last\ path\ and\ then\ proceed\ with\ the\ movement\ based\ on\ the\ specified\r\n\ boolean\ parameter\ 'advance'.\ If\ 'advance'\ is\ true\ and\ the\ spider\ is\ at\ the\ center\r\n\ of\ the\ web,\ it\ will\ move\ towards\ the\ outer\ edge.\ If\ 'advance'\ is\ false\ and\ the\ spider\r\n\ is\ at\ the\ outer\ edge,\ it\ will\ retract\ towards\ the\ center.\ After\ the\ movement,\ the\ spider's\r\n\ position\ and\ distance\ to\ the\ center\ are\ updated\ accordingly.\ The\ spider's\ movement\ is\r\n\ tracked,\ and\ the\ last\ action\ flag\ is\ set\ to\ true\ upon\ successful\ execution.\r\n\r\n\ @param\ advance\ A\ boolean\ value\ indicating\ whether\ the\ spider\ should\ advance\ (true)\ or\ retract\ (false).\r\n
comment16.params=advance
comment16.target=void\ moveSpider(boolean)
comment16.text=\r\n\ Moves\ the\ spider\ on\ the\ spider\ web\ based\ on\ the\ specified\ direction\ (advance\ or\ retract).\r\n\r\n\ This\ method\ controls\ the\ spider's\ movement\ on\ the\ spider\ web\ by\ iterating\ through\r\n\ available\ bridges\ and\ moving\ the\ spider\ along\ them\ in\ the\ specified\ direction\ until\r\n\ it\ reaches\ the\ desired\ position.\ The\ spider's\ movement\ is\ updated,\ and\ the\ last\ path\r\n\ and\ unused\ bridge\ lists\ are\ adjusted\ accordingly.\ If\ a\ bridge\ connects\ the\ spider's\r\n\ current\ strand\ to\ another\ strand,\ the\ spider\ is\ transported\ to\ the\ other\ strand's\ position.\r\n\r\n\ @param\ advance\ A\ boolean\ value\ indicating\ whether\ the\ spider\ should\ advance\ (true)\ or\ retract\ (false).\r\n
comment17.params=bridge
comment17.target=void\ comprobeBridge(Bridge)
comment18.params=
comment18.target=void\ comprobeSpot()
comment19.params=
comment19.target=int[]\ spiderLastPath()
comment19.text=\r\n\ Retrieves\ the\ spider's\ last\ path\ as\ an\ array\ of\ integers.\r\n\r\n\ This\ method\ retrieves\ the\ spider's\ last\ path,\ which\ consists\ of\ the\ sequence\ of\ strands\r\n\ the\ spider\ traversed\ during\ its\ previous\ movement.\ It\ returns\ an\ array\ containing\ the\r\n\ sequence\ of\ strands\ in\ the\ spider's\ last\ path.\ If\ the\ spider's\ last\ path\ is\ not\ empty,\r\n\ it\ displays\ the\ path,\ copies\ the\ sequence\ of\ strands\ into\ an\ array,\ and\ sets\ the\ last\r\n\ action\ flag\ to\ true.\ Otherwise,\ it\ sets\ the\ last\ action\ flag\ to\ false.\r\n\r\n\ @return\ An\ array\ of\ integers\ representing\ the\ spider's\ last\ path.\r\n
comment2.params=numStrands\ favorite\ bridges
comment2.target=SpiderWeb(int,\ int,\ int[][])
comment2.text=\r\n\ Overloaded\ constructor\ that\ also\ initializes\ bridges\ between\ strands\ based\ on\ input\ arrays,\r\n\ and\ marks\ a\ favorite\ spot\ with\ a\ unique\ color.\r\n
comment20.params=
comment20.target=java.lang.String[]\ unusedBridge()
comment20.text=\r\n\ Retrieves\ the\ unused\ bridges\ as\ an\ array\ of\ strings.\r\n\r\n\ This\ method\ retrieves\ the\ unused\ bridges\ on\ the\ spider\ web\ and\ returns\ them\ as\r\n\ an\ array\ of\ strings.\ If\ there\ are\ unused\ bridges,\ it\ copies\ their\ colors\ into\r\n\ the\ array\ and\ sets\ the\ last\ action\ flag\ to\ true.\ Otherwise,\ it\ sets\ the\ last\r\n\ action\ flag\ to\ false.\r\n\r\n\ @return\ An\ array\ of\ strings\ representing\ the\ unused\ bridges\ on\ the\ spider\ web.\r\n
comment21.params=
comment21.target=java.lang.String[]\ bridges()
comment21.text=\r\n\ Retrieves\ an\ array\ of\ strings\ representing\ the\ colors\ of\ all\ bridges\ on\ the\ spider\ web.\r\n\r\n\ This\ method\ retrieves\ the\ colors\ of\ all\ bridges\ present\ on\ the\ spider\ web\ and\ returns\r\n\ them\ as\ an\ array\ of\ strings.\ It\ retrieves\ the\ set\ of\ keys\ (bridge\ colors)\ from\ the\r\n\ map\ of\ bridges,\ converts\ it\ into\ an\ array,\ and\ sets\ the\ last\ action\ flag\ to\ true\ if\r\n\ there\ are\ bridges\ available.\ Otherwise,\ it\ sets\ the\ last\ action\ flag\ to\ false.\r\n\r\n\ @return\ An\ array\ of\ strings\ representing\ the\ colors\ of\ all\ bridges\ on\ the\ spider\ web.\r\n
comment22.params=color
comment22.target=int[]\ bridge(java.lang.String)
comment22.text=\r\n\ Retrieves\ an\ array\ of\ integers\ representing\ the\ strands\ connected\ by\ a\ specific\ bridge.\r\n\r\n\ This\ method\ retrieves\ the\ strands\ connected\ by\ the\ bridge\ with\ the\ specified\ color\r\n\ and\ returns\ them\ as\ an\ array\ of\ integers.\ If\ the\ bridge\ exists\ in\ the\ map,\ it\ retrieves\r\n\ the\ first\ and\ second\ strands\ connected\ by\ the\ bridge\ and\ sets\ the\ last\ action\ flag\ to\ true.\r\n\ Otherwise,\ it\ sets\ the\ last\ action\ flag\ to\ false.\r\n\r\n\ @param\ color\ The\ color\ of\ the\ bridge\ for\ which\ strands\ are\ to\ be\ retrieved.\r\n\ @return\ An\ array\ of\ integers\ representing\ the\ strands\ connected\ by\ the\ specified\ bridge.\r\n
comment23.params=
comment23.target=java.lang.String[]\ spots()
comment23.text=\r\n\ Retrieves\ an\ array\ of\ strings\ representing\ the\ colors\ of\ all\ spots\ on\ the\ spider\ web.\r\n\r\n\ This\ method\ retrieves\ the\ colors\ of\ all\ spots\ present\ on\ the\ spider\ web\ and\ returns\r\n\ them\ as\ an\ array\ of\ strings.\ It\ retrieves\ the\ set\ of\ keys\ (spot\ colors)\ from\ the\r\n\ map\ of\ spots,\ converts\ it\ into\ an\ array,\ and\ sets\ the\ last\ action\ flag\ to\ true\ if\r\n\ there\ are\ spots\ available.\ Otherwise,\ it\ sets\ the\ last\ action\ flag\ to\ false.\r\n\r\n\ @return\ An\ array\ of\ strings\ representing\ the\ colors\ of\ all\ spots\ on\ the\ spider\ web.\r\n
comment24.params=color
comment24.target=int\ spot(java.lang.String)
comment24.text=\r\n\ Retrieves\ the\ strand\ number\ of\ the\ spot\ with\ the\ specified\ color.\r\n\r\n\ This\ method\ retrieves\ the\ strand\ number\ of\ the\ spot\ with\ the\ specified\ color\r\n\ and\ returns\ it\ as\ an\ integer.\ If\ the\ spot\ exists\ in\ the\ map,\ it\ retrieves\r\n\ its\ strand\ number\ and\ sets\ the\ last\ action\ flag\ to\ true.\ Otherwise,\ it\ sets\r\n\ the\ last\ action\ flag\ to\ false\ and\ returns\ -1.\r\n\r\n\ @param\ color\ The\ color\ of\ the\ spot\ for\ which\ the\ strand\ number\ is\ to\ be\ retrieved.\r\n\ @return\ The\ strand\ number\ of\ the\ spot\ with\ the\ specified\ color,\ or\ -1\ if\ not\ found.\r\n
comment25.params=
comment25.target=void\ finish()
comment25.text=\r\n\ Finish\ the\ simulation.\r\n\ \r\n\ This\ method\ finishes\ the\ simulation\ by\ making\ all\ elements\ invisible\ and\r\n\ displaying\ a\ message\ indicating\ that\ the\ simulation\ has\ ended.\ It\ sets\ the\r\n\ last\ action\ flag\ to\ true\ after\ completing\ the\ operation.\r\n
comment26.params=
comment26.target=boolean\ ok()
comment26.text=\r\n\ Checks\ if\ the\ last\ action\ was\ successful.\r\n\r\n\ This\ method\ returns\ a\ boolean\ indicating\ whether\ the\ last\ action\ performed\r\n\ by\ the\ simulator\ was\ successful\ or\ not.\r\n\r\n\ @return\ True\ if\ the\ last\ action\ was\ successful,\ false\ otherwise.\r\n
comment3.params=
comment3.target=void\ makeVisible()
comment3.text=\r\n\ Makes\ the\ SpiderWeb\ visible\ if\ it\ is\ not\ already.\r\n
comment4.params=
comment4.target=void\ makeInvisible()
comment4.text=\r\n\ Makes\ the\ SpiderWeb\ invisible\ if\ it\ is\ currently\ visible.\r\n
comment5.params=color\ distance\ firstStrand
comment5.target=void\ addBridge(java.lang.String,\ int,\ int)
comment5.text=\r\n\ Adds\ a\ bridge\ between\ two\ consecutive\ strands\ of\ the\ spider\ web.\ \r\n\r\n\ This\ method\ creates\ a\ bridge,\ represented\ as\ a\ connection\ between\ two\ strands\r\n\ at\ a\ specified\ distance\ from\ the\ center\ of\ the\ web.\ The\ bridge\ is\ added\ only\ if\r\n\ no\ other\ bridge\ with\ the\ same\ color\ already\ exists,\ the\ specified\ distance\ is\ less\ than\r\n\ half\ of\ the\ web's\ diameter,\ and\ the\ strand\ indices\ are\ within\ the\ valid\ range.\ The\ bridge\r\n\ connects\ the\ specified\ strand\ and\ the\ next\ strand\ in\ the\ sequence,\ wrapping\ around\ to\ the\r\n\ first\ strand\ if\ the\ specified\ strand\ is\ the\ last\ one.\r\n\r\n\ @param\ color\ The\ color\ of\ the\ bridge,\ used\ as\ a\ unique\ identifier.\r\n\ @param\ distance\ The\ radial\ distance\ of\ the\ bridge\ from\ the\ center\ of\ the\ web.\r\n\ @param\ firstStrand\ The\ index\ of\ the\ first\ strand;\ the\ bridge\ will\ connect\ this\ strand\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ to\ the\ next\ one\ in\ the\ circular\ arrangement\ of\ strands.\r\n
comment6.params=color\ favorite
comment6.target=void\ addSpot(java.lang.String,\ int)
comment6.text=\r\n\ Adds\ a\ spot\ to\ the\ spider\ web\ at\ the\ specified\ strand.\r\n\r\n\ This\ method\ places\ a\ new\ spot\ on\ the\ web,\ identified\ by\ a\ unique\ color.\ The\ spot\r\n\ is\ positioned\ on\ the\ specified\ strand\ (referred\ to\ as\ "favorite").\ A\ spot\ can\ only\r\n\ be\ added\ if\ there\ isn't\ already\ a\ spot\ with\ the\ same\ color,\ and\ the\ specified\ strand\r\n\ index\ must\ be\ valid\ within\ the\ current\ number\ of\ strands\ in\ the\ web.\r\n\r\n\ @param\ color\ The\ color\ of\ the\ spot,\ which\ acts\ as\ a\ unique\ identifier.\r\n\ @param\ favorite\ The\ index\ of\ the\ strand\ where\ the\ spot\ will\ be\ located.\r\n
comment7.params=type\ color\ favorite
comment7.target=void\ addSpot(java.lang.String,\ java.lang.String,\ int)
comment8.params=type\ color\ distance\ firstStrand
comment8.target=void\ addBridge(java.lang.String,\ java.lang.String,\ int,\ int)
comment9.params=
comment9.target=void\ addStrand()
comment9.text=\r\n\ Adds\ an\ additional\ strand\ to\ the\ spider\ web.\r\n\r\n\ This\ method\ increments\ the\ total\ number\ of\ strands\ in\ the\ web\ and\ recalculates\r\n\ the\ angular\ position\ for\ each\ existing\ strand,\ spot,\ and\ bridge\ to\ evenly\ distribute\r\n\ them\ around\ the\ center\ point.\ If\ the\ web\ is\ visible\ when\ this\ method\ is\ called,\ it\r\n\ will\ temporarily\ be\ made\ invisible\ to\ update\ the\ layout\ and\ then\ made\ visible\ again\r\n\ to\ reflect\ the\ changes.\ This\ approach\ ensures\ that\ the\ web\ maintains\ a\ balanced\r\n\ appearance\ with\ evenly\ spaced\ strands.\r\n
numComments=27
